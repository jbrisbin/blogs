{"meta":{"exported_on":1474897415077,"version":"007"},"data":{"posts":[{"id":1,"uuid":"e58991fd-c8c3-4e53-abed-53afa4f48293","title":"Welcome to Ghost","slug":"welcome-to-ghost","markdown":"You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at `<your blog URL>/ghost/`. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!\n\n## Getting Started\n\nGhost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!\n\nWriting in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use *shortcuts* to **style** your content. For example, a list:\n\n* Item number one\n* Item number two\n    * A nested item\n* A final item\n\nor with numbers!\n\n1. Remember to buy some milk\n2. Drink the milk\n3. Tweet that I remembered to buy the milk, and drank it\n\n### Links\n\nWant to link to a source? No problem. If you paste in a URL, like http://ghost.org - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to [the Ghost website](http://ghost.org). Neat.\n\n### What about Images?\n\nImages work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:\n\n![The Ghost Logo](https://ghost.org/images/ghost.png)\n> Fuji X-T1 | 23mm | <sup>1</sup>&frasl;<sub>2000</sub> @ ƒ8\n\nNot sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:\n\n![A bowl of bananas]\n\n\n### Quoting\n\nSometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!\n\n> Ghost - Just a blogging platform\n\n### Working with Code\n\nGot a streak of geek? We've got you covered there, too. You can write inline `<code>` blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.\n\n    .awesome-thing {\n        display: block;\n        width: 100%;\n    }\n\n### Ready for a Break? \n\nThrow 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.\n\n---\n\n### Advanced Usage\n\nThere's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.\n\n<input type=\"text\" placeholder=\"I'm an input field!\" />\n\nThat should be enough to get you started. Have fun - and let us know what you think :)","mobiledoc":null,"html":"<p>You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</p>\n\n<h2 id=\"gettingstarted\">Getting Started</h2>\n\n<p>Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!</p>\n\n<p>Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:</p>\n\n<ul>\n<li>Item number one</li>\n<li>Item number two\n<ul><li>A nested item</li></ul></li>\n<li>A final item</li>\n</ul>\n\n<p>or with numbers!</p>\n\n<ol>\n<li>Remember to buy some milk  </li>\n<li>Drink the milk  </li>\n<li>Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n\n<h3 id=\"links\">Links</h3>\n\n<p>Want to link to a source? No problem. If you paste in a URL, like <a href=\"http://ghost.org\">http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href=\"http://ghost.org\">the Ghost website</a>. Neat.</p>\n\n<h3 id=\"whataboutimages\">What about Images?</h3>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p>\n\n<p><img src=\"https://ghost.org/images/ghost.png\" alt=\"The Ghost Logo\" /></p>\n\n<blockquote>\n  <p>Fuji X-T1 | 23mm | <sup>1</sup>&frasl;<sub>2000</sub> @ ƒ8</p>\n</blockquote>\n\n<p>Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p>\n\n<h3 id=\"quoting\">Quoting</h3>\n\n<p>Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!</p>\n\n<blockquote>\n  <p>Ghost - Just a blogging platform</p>\n</blockquote>\n\n<h3 id=\"workingwithcode\">Working with Code</h3>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.</p>\n\n<pre><code>.awesome-thing {\n    display: block;\n    width: 100%;\n}\n</code></pre>\n\n<h3 id=\"readyforabreak\">Ready for a Break?</h3>\n\n<p>Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.</p>\n\n<hr />\n\n<h3 id=\"advancedusage\">Advanced Usage</h3>\n\n<p>There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><input type=\"text\" placeholder=\"I'm an input field!\" /></p>\n\n<p>That should be enough to get you started. Have fun - and let us know what you think :)</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":1466099128410,"created_by":1,"updated_at":1466214275125,"updated_by":1,"published_at":1466099128432,"published_by":1},{"id":2,"uuid":"03d12b14-f586-4e32-94a3-a5196bd459aa","title":"Timeseries in Riak on Docker","slug":"timeseries-in-riak-on-docker","markdown":"[Riak TS](http://basho.com/products/riak-ts/) is a special-purpose database built on a [Basho Riak](https://github.com/basho/riak) foundation. Riak is an [eventually-consistent](https://en.wikipedia.org/wiki/Eventual_consistency) K/V database written in Erlang and aims to be operationally resilient and robust in the face of failure. Although [the timeseries work that was recently open-sourced](http://basho.com/posts/business/riak-ts-1-3-is-now-open-source-what-is-here-and-what-is-coming/) currently lives in [a separate branch of the Riak codebase](https://github.com/basho/riak/tree/riak_ts-develop), plans are being made to merge the changes and performance gains of timeseries into the K/V codebase so that it can benefit from those improvements as well.\n\n### Outline\n\n-  [Docker and Riak](#docker-and-riak)\n  - [Using `docker run`](#using-docker-run)\n  - [Using `docker-compose`](#using-compose)\n\n### <a name=\"docker-and-riak\"></a> Docker and Riak\n\nRiak TS 1.3 is available via [packagecloud](https://packagecloud.io/basho/riak-ts). It would have been pretty straightforward to build a Ubuntu, Debian, or CentOS image with Riak TS installed and set up for single-node operations. Single nodes are fine for testing and ad-hoc tasks, but if you're running Riak, you probably want to have the flexibility and performance of having multiple nodes in a cluster. I took the single-node Docker container a step further and installed [Riak Explorer](https://github.com/basho-labs/riak_explorer), which has a web UI powered by [ember.js](http://emberjs.com/) for interacting with a Riak cluster. Explorer also exposes [a comprehensive REST API](http://basho-labs.github.io/riak_explorer/docs/api.html). which I used in the [startup script](https://github.com/basho-labs/docker-images/blob/master/riak/overlays/riak-cluster.sh) which does automatic cluster joins when the container starts. Using `docker-compose` you can start a scale a Riak TS cluster of dozens of nodes with only a couple commands and nothing to install but Docker itself.\n\n#### <a name=\"using-docker-run\"></a> Using `docker-run`\n\nThe simplest way to get started with Riak TS and Docker is to run a single node.\n\n    docker run --name=dev1 -p 8087:8087 -p 8098:8098 basho/riak-ts\n\n#### <a name=\"using-compose\"></a> Using `docker-compose`\n","mobiledoc":null,"html":"<p><a href=\"http://basho.com/products/riak-ts/\">Riak TS</a> is a special-purpose database built on a <a href=\"https://github.com/basho/riak\">Basho Riak</a> foundation. Riak is an <a href=\"https://en.wikipedia.org/wiki/Eventual_consistency\">eventually-consistent</a> K/V database written in Erlang and aims to be operationally resilient and robust in the face of failure. Although <a href=\"http://basho.com/posts/business/riak-ts-1-3-is-now-open-source-what-is-here-and-what-is-coming/\">the timeseries work that was recently open-sourced</a> currently lives in <a href=\"https://github.com/basho/riak/tree/riak_ts-develop\">a separate branch of the Riak codebase</a>, plans are being made to merge the changes and performance gains of timeseries into the K/V codebase so that it can benefit from those improvements as well.</p>\n\n<h3 id=\"outline\">Outline</h3>\n\n<ul>\n<li><a href=\"#docker-and-riak\">Docker and Riak</a>\n<ul><li><a href=\"#using-docker-run\">Using <code>docker run</code></a></li>\n<li><a href=\"#using-compose\">Using <code>docker-compose</code></a></li></ul></li>\n</ul>\n\n<h3 id=\"anamedockerandriakadockerandriak\"><a name=\"docker-and-riak\"></a> Docker and Riak</h3>\n\n<p>Riak TS 1.3 is available via <a href=\"https://packagecloud.io/basho/riak-ts\">packagecloud</a>. It would have been pretty straightforward to build a Ubuntu, Debian, or CentOS image with Riak TS installed and set up for single-node operations. Single nodes are fine for testing and ad-hoc tasks, but if you're running Riak, you probably want to have the flexibility and performance of having multiple nodes in a cluster. I took the single-node Docker container a step further and installed <a href=\"https://github.com/basho-labs/riak_explorer\">Riak Explorer</a>, which has a web UI powered by <a href=\"http://emberjs.com/\">ember.js</a> for interacting with a Riak cluster. Explorer also exposes <a href=\"http://basho-labs.github.io/riak_explorer/docs/api.html\">a comprehensive REST API</a>. which I used in the <a href=\"https://github.com/basho-labs/docker-images/blob/master/riak/overlays/riak-cluster.sh\">startup script</a> which does automatic cluster joins when the container starts. Using <code>docker-compose</code> you can start a scale a Riak TS cluster of dozens of nodes with only a couple commands and nothing to install but Docker itself.</p>\n\n<h4 id=\"anameusingdockerrunausingdockerrun\"><a name=\"using-docker-run\"></a> Using <code>docker-run</code></h4>\n\n<p>The simplest way to get started with Riak TS and Docker is to run a single node.</p>\n\n<pre><code>docker run --name=dev1 -p 8087:8087 -p 8098:8098 basho/riak-ts\n</code></pre>\n\n<h4 id=\"anameusingcomposeausingdockercompose\"><a name=\"using-compose\"></a> Using <code>docker-compose</code></h4>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":1466183872626,"created_by":1,"updated_at":1466537825669,"updated_by":1,"published_at":null,"published_by":null},{"id":3,"uuid":"d1a4feee-bc38-45f2-af34-7cd30e975b07","title":"Flexible blogging with Ghost, Docker, and CoreOS","slug":"flexible-blogging-with-ghost-docker-and-coreos","markdown":"When it comes to blogging software I can't but admit to being a profligate and a philanderer. Never content, I'm always hoping that that _next_ platform is going to be The One <sup>(TM)</sup> that finally satisfies my discontent of the moment. Years ago I actually started with MovableType. I've used WordPress and Tumblr and Blogger and most of the rest. WordPress is a fine platform but it's just too much of everything any more. There's no focus to it because it tries to be all things to all bloggers. That's why I've completely revamped my blogging infrastructure based on CoreOS <sup>[1](#links)</sup>, Docker <sup>[2](#links)</sup>, and Ghost <sup>[3](#links)</sup>.\n\n### Ghost as a blogging platform\n\nAfter ditching WordPress and deciding to give [Ghost](https://ghost.org/) a try, my first decision was how to run the software. The company behind Ghost supports the development by selling a premium hosted platform; it's very reasonably-priced for what you get. I already had an account on Rackspace, however, so it didn't make sense for me to pay for a hosted service when I could just run the OSS version on my own cloud server.\n\nI started out&mdash;surprisingly for me&mdash;by reading the [documentation](https://support.ghost.org/developers/) and [getting started guide](http://support.ghost.org/getting-started/) on the Ghost website. Although the docs didn't address it specifically, I knew I would be better off running this from a Docker container. As my investigation continued and I decided to base my infrastructure on CoreOS, using Docker became a must.\n\nI could have built my own Docker custom image but I found that Ghost has [an official image on Docker Hub](https://hub.docker.com/_/ghost/). Since there didn't seem to be much in the way of custom configuration needed to run it, I decided to give the unaltered image a try. It was easy to test this on my local MacBook Pro, where I have [the xhyve-based beta version of Docker](https://blog.docker.com/2016/03/docker-for-mac-windows-beta/) running. It really was as simple as a single `docker run` command:\n\n    > mkdir blog && docker run -v $(pwd)/blog:/var/lib/ghost -p 2368:2368 ghost\n\nI pulled up the admin console by navigating to [localhost:2368/ghost/](http://localhost:2368/ghost/) in Chrome.\n\n![Ghost](/content/images/2016/06/setup.jpg)\n\nI was taken to a screen that let me set up my user. In the default configuration, everything is saved to an sqlite database in the filesystem. This is perfect for my needs since I also set up an automagic backup system using GitHub and `inotifywait`. More on that later.\n\nSetting up Ghost was super easy. I was immediately impressed by the immaculately clean layout and the simplicity of the design. I could quickly and easily find my way around the interface and I didn't have any problems finding the customizations I wanted for the theme I was using ([Odin](https://github.com/h4t0n/odin)).\n\n![Ghost Admin](/content/images/2016/06/content.jpg)\n\nAt this point I was sold. I didn't really need to see too much more. Markdown editing, simple administration, easy setup; it really was everything I'd been hoping for in a blogging platform.\n\nI took the time to set up a nice-looking theme that would work well for just about any kind of content I care to publish: technical articles, photography, creative writing, or whatever.\n\n#### Remote Sync and Backup\n\nAt this point I needed to figure out how to deploy and sync the changes I'd made while evaluating Ghost. I knew I wanted to keep my resources in GitHub so I could have a record of changes and be able to revert to a previous version of something should that be necessary. I created a repository in my GitHub account and moved my entire `blog` directory into that repo and added everything to git. This adds the sqlite database file which contains all my blog settings and content as well as the CSS and theme resources I tweaked. With a simple `git clone` on my server I could have my content ready to be served up by Ghost.\n\n#### Running Ghost in the Cloud\n\nNow I had to figure out how to host Ghost on my Rackspace cloud server. Having been a long-time user of Ubuntu, I first thought I might just run the server as an init process. But after taking a look at my rather outdated Ubuntu box (10.04), I decided it was time for the cobbler to make his kids some shoes and bring the system up-to-date.\n\nI once read that one of my favorite authors Umberto Eco said you could learn a lot about someone by looking at the books in their library which they had't yet read. His reasoning was that people tend to buy books about things which they want to learn. Eco's principle holds true for me in technology matters as well. I chose to run this blogging platform on CoreOS because it's a technology I think is important for the future of data computing and I wanted to learn more about it. The best way to do that is to install it and try to do something meaningful.\n\nRackspace offers CoreOS as a standard image so I simply rebuilt my old server on CoreOS Alpha (I tend to prefer the latest-and-greatest over something more stable).\n\n##### Systemd Unit\n\nNow that I was ready to deploy Ghost to my CoreOS server, I needed to translate the `docker run` command I used in testing to a more production-level systemd unit file. The [CoreOS documentation for this](https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd/) is top-notch, so it didn't take that long; I simply copied the example Unit file and modified it to suit my deployment. I decided to put the clone of my repository in `/var/blogs` and use `8081` as the port for this instance of Ghost since I planned to add another blog for our local historical society in the near future. The unit file turned out to be very simple.\n\n> /etc/systemd/system/jbrisbin.service\n```\n[Unit]\nDescription=jbrisbin.com Blog\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker rm --force jbrisbin\nExecStartPre=/usr/bin/docker pull ghost\nExecStart=/usr/bin/docker run --name jbrisbin -v /var/blogs/jbrisbin:/var/lib/ghost -p 8081:2368 ghost\n\n[Install]\nWantedBy=multi-user.target\n```\n\nSince my content is all stored in git (more on that in a second), I decided to leave in the `ExecStartPre` instructions from the example that remove any existing image when the service starts. This has the side effect of potentially doing an upgrade of Ghost whenever the server is restarted. One of the problems I always had with blogging software pre-Docker was keeping things up-to-date. Thankfully this is simply not an issue any more. I may end up commenting this out at some point if it becomes a problem. At the very least I might put in a version tag for the Docker image to fix the version of Ghost I'm using. In a \"real\" production environment you'll probably want to be a little more conservative with your upgrade settings.\n\nTo enable and start the service, I used `systemctl`.\n\n```\n$ systemctl enable /etc/systemd/system/jbrisbin.service\n$ systemctl start jbrisbin.service\n```\n\nSince I had previously set up my SSH keys and done a `git clone` of my repository, I pulled up the server and got the home page I had created on my local machine.\n\n![jbrisbin.com Home](/content/images/2016/06/home.jpg)\n\nI have a hard time seeing how this could have been easier!\n\n#### Watching for Changes\n\nNow that I was able to start making changes to my live blog, I needed to make sure that content gets backed up and that I can re-create the server easily if something untoward happens. Since all my content (and some of my config) is stored in git, I figured it would be pretty easy to create a file watcher service that could tell when changes happened to my application files and automatically do a `git commit` and `push` to ensure those changes are backed up. This simple systemd-based service is running right now and every time I stop typing to let Ghost save the draft of this article, the service is committing those changes to git for immediate backup!\n\nThe service is simply a Docker image based on [Alpine Linux](https://hub.docker.com/_/alpine/) which means size-wise is itsy bitsy (that's a technical term for _really small_). That fits well with my goals of having a minimal infrastructure to care for. It also saves on disk space on my CoreOS server which is pretty small.\n\nI did some research to find an efficient way to watch the filesystem for changes and `inotify-tools` quickly floated to the top of Google's search rankings. I wrote a simple bash script that used `inotifywait` to poll for changes to my application files and then either run a `git add` or a `git rm`, depending on the event.\n\nI quickly discovered I needed to filter out some events because sqlite writes a `*-journal` file when it makes changes to your database. I didn't want these transitory files gumming up the works so I excluded them.\n\n> /usr/sbin/git-watch.sh\n```\n#!/bin/bash\n\nWATCH_DIR=$1\n\necho \"Watching $WATCH_DIR\"\n\nwhile true; do\n  inotifywait -r -e modify -e delete --exclude '-journal$' $WATCH_DIR | while read FILE; do\n    event=$(echo $FILE | awk '{print $2}')\n    file=$(echo $FILE | awk '{print $1$3}')\n\n    cd $WATCH_DIR\n\n    if [ \"$event\" == \"MODIFY\" ]; then\n      git add $file\n    elif [ \"$event\" == \"DELETE\" ]; then\n      git rm -f $file\n    fi\n\n    git pull\n    git commit -m \"Change made to $file\"\n    git push\n  done\ndone\n```\n\nAdmittedly this service is very naive. It doesn't even attempt to deal with conflicts. But the goal here was really just to provide an automated backup and give a minimum amount of flexibility in allowing me to make simple changes locally and deploy them to my server by pushing those changes to my git repo.\n\nTo run the service in CoreOS it has to be in a Docker image, so I created a simple one that uses this script as an `ENTRYPOINT`. \n\n> Dockerfile\n```\nFROM alpine\nMAINTAINER Jon Brisbin <jon@jbrisbin.com>\n\nRUN \\\n  apk update && \\\n  apk add inotify-tools git bash openssh-client\n\nCOPY git-watch.sh /usr/sbin/git-watch.sh\nRUN chmod a+x /usr/sbin/git-watch.sh\n\nENTRYPOINT [\"/usr/sbin/git-watch.sh\"]\n```\n\nFinally, I created a unit file to run the service in systemd and enabled it per the documentation.\n\n>/etc/systemd/system/git-watch-blogs.service\n```\n[Unit]\nDescription=Watch Blogs\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/docker run -v /root/.ssh:/root/.ssh -v /root/.gitconfig:/root/.gitconfig -v /var/blogs:/var/blogs git-watch /var/blogs\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```\n\nAfter enabling and starting the `git-watch-blogs.service` I was able to make a change to the content in the Ghost admin panel and see the automatic commit show up in my repo on GitHub.\n\n```\n$ systemctl enable /etc/systemd/system/git-watch-blogs.service\n$ systemctl start git-watch-blogs.service\n```\n\n#### Conclusion\n\nThis lightweight container-based solution is far easier to maintain, cleaner to administer and easier to upgrade and synchronize with external changes than my previous WordPress and Tumblr blogging platforms. Ghost itself is a joy to use and is beautiful to look at. CoreOS and Docker are extremely versatile arrows to have in my quiver and using them to create ad-hoc services fits my needs perfectly.\n\nWithin the next couple of weeks I plan to add another Docker container to serve the website of our local historical society which is in dire need of an upgrade. My plan is to just add another directory to my git repository, deploy another Ghost service and enjoy the benefits of simple and free backup thanks to my `git-watch` sync service.\n\n---\n\n##### <a name=\"links\"></a> Links\n\n[1] - [https://coreos.com/](https://coreos.com/)<br/>\n[2] - [https://www.docker.com/](https://www.docker.com/)<br/>\n[3] - [https://ghost.org/](https://ghost.org/) and [https://hub.docker.com/_/ghost/](https://hub.docker.com/_/ghost/)","mobiledoc":null,"html":"<p>When it comes to blogging software I can't but admit to being a profligate and a philanderer. Never content, I'm always hoping that that <em>next</em> platform is going to be The One <sup>(TM)</sup> that finally satisfies my discontent of the moment. Years ago I actually started with MovableType. I've used WordPress and Tumblr and Blogger and most of the rest. WordPress is a fine platform but it's just too much of everything any more. There's no focus to it because it tries to be all things to all bloggers. That's why I've completely revamped my blogging infrastructure based on CoreOS <sup><a href=\"#links\">1</a></sup>, Docker <sup><a href=\"#links\">2</a></sup>, and Ghost <sup><a href=\"#links\">3</a></sup>.</p>\n\n<h3 id=\"ghostasabloggingplatform\">Ghost as a blogging platform</h3>\n\n<p>After ditching WordPress and deciding to give <a href=\"https://ghost.org/\">Ghost</a> a try, my first decision was how to run the software. The company behind Ghost supports the development by selling a premium hosted platform; it's very reasonably-priced for what you get. I already had an account on Rackspace, however, so it didn't make sense for me to pay for a hosted service when I could just run the OSS version on my own cloud server.</p>\n\n<p>I started out&mdash;surprisingly for me&mdash;by reading the <a href=\"https://support.ghost.org/developers/\">documentation</a> and <a href=\"http://support.ghost.org/getting-started/\">getting started guide</a> on the Ghost website. Although the docs didn't address it specifically, I knew I would be better off running this from a Docker container. As my investigation continued and I decided to base my infrastructure on CoreOS, using Docker became a must.</p>\n\n<p>I could have built my own Docker custom image but I found that Ghost has <a href=\"https://hub.docker.com/_/ghost/\">an official image on Docker Hub</a>. Since there didn't seem to be much in the way of custom configuration needed to run it, I decided to give the unaltered image a try. It was easy to test this on my local MacBook Pro, where I have <a href=\"https://blog.docker.com/2016/03/docker-for-mac-windows-beta/\">the xhyve-based beta version of Docker</a> running. It really was as simple as a single <code>docker run</code> command:</p>\n\n<pre><code>&gt; mkdir blog &amp;&amp; docker run -v $(pwd)/blog:/var/lib/ghost -p 2368:2368 ghost\n</code></pre>\n\n<p>I pulled up the admin console by navigating to <a href=\"http://localhost:2368/ghost/\">localhost:2368/ghost/</a> in Chrome.</p>\n\n<p><img src=\"/content/images/2016/06/setup.jpg\" alt=\"Ghost\" /></p>\n\n<p>I was taken to a screen that let me set up my user. In the default configuration, everything is saved to an sqlite database in the filesystem. This is perfect for my needs since I also set up an automagic backup system using GitHub and <code>inotifywait</code>. More on that later.</p>\n\n<p>Setting up Ghost was super easy. I was immediately impressed by the immaculately clean layout and the simplicity of the design. I could quickly and easily find my way around the interface and I didn't have any problems finding the customizations I wanted for the theme I was using (<a href=\"https://github.com/h4t0n/odin\">Odin</a>).</p>\n\n<p><img src=\"/content/images/2016/06/content.jpg\" alt=\"Ghost Admin\" /></p>\n\n<p>At this point I was sold. I didn't really need to see too much more. Markdown editing, simple administration, easy setup; it really was everything I'd been hoping for in a blogging platform.</p>\n\n<p>I took the time to set up a nice-looking theme that would work well for just about any kind of content I care to publish: technical articles, photography, creative writing, or whatever.</p>\n\n<h4 id=\"remotesyncandbackup\">Remote Sync and Backup</h4>\n\n<p>At this point I needed to figure out how to deploy and sync the changes I'd made while evaluating Ghost. I knew I wanted to keep my resources in GitHub so I could have a record of changes and be able to revert to a previous version of something should that be necessary. I created a repository in my GitHub account and moved my entire <code>blog</code> directory into that repo and added everything to git. This adds the sqlite database file which contains all my blog settings and content as well as the CSS and theme resources I tweaked. With a simple <code>git clone</code> on my server I could have my content ready to be served up by Ghost.</p>\n\n<h4 id=\"runningghostinthecloud\">Running Ghost in the Cloud</h4>\n\n<p>Now I had to figure out how to host Ghost on my Rackspace cloud server. Having been a long-time user of Ubuntu, I first thought I might just run the server as an init process. But after taking a look at my rather outdated Ubuntu box (10.04), I decided it was time for the cobbler to make his kids some shoes and bring the system up-to-date.</p>\n\n<p>I once read that one of my favorite authors Umberto Eco said you could learn a lot about someone by looking at the books in their library which they had't yet read. His reasoning was that people tend to buy books about things which they want to learn. Eco's principle holds true for me in technology matters as well. I chose to run this blogging platform on CoreOS because it's a technology I think is important for the future of data computing and I wanted to learn more about it. The best way to do that is to install it and try to do something meaningful.</p>\n\n<p>Rackspace offers CoreOS as a standard image so I simply rebuilt my old server on CoreOS Alpha (I tend to prefer the latest-and-greatest over something more stable).</p>\n\n<h5 id=\"systemdunit\">Systemd Unit</h5>\n\n<p>Now that I was ready to deploy Ghost to my CoreOS server, I needed to translate the <code>docker run</code> command I used in testing to a more production-level systemd unit file. The <a href=\"https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd/\">CoreOS documentation for this</a> is top-notch, so it didn't take that long; I simply copied the example Unit file and modified it to suit my deployment. I decided to put the clone of my repository in <code>/var/blogs</code> and use <code>8081</code> as the port for this instance of Ghost since I planned to add another blog for our local historical society in the near future. The unit file turned out to be very simple.</p>\n\n<blockquote>\n  <p>/etc/systemd/system/jbrisbin.service</p>\n</blockquote>\n\n<pre><code>[Unit]\nDescription=jbrisbin.com Blog  \nAfter=docker.service  \nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0  \nExecStartPre=-/usr/bin/docker rm --force jbrisbin  \nExecStartPre=/usr/bin/docker pull ghost  \nExecStart=/usr/bin/docker run --name jbrisbin -v /var/blogs/jbrisbin:/var/lib/ghost -p 8081:2368 ghost\n\n[Install]\nWantedBy=multi-user.target  \n</code></pre>\n\n<p>Since my content is all stored in git (more on that in a second), I decided to leave in the <code>ExecStartPre</code> instructions from the example that remove any existing image when the service starts. This has the side effect of potentially doing an upgrade of Ghost whenever the server is restarted. One of the problems I always had with blogging software pre-Docker was keeping things up-to-date. Thankfully this is simply not an issue any more. I may end up commenting this out at some point if it becomes a problem. At the very least I might put in a version tag for the Docker image to fix the version of Ghost I'm using. In a \"real\" production environment you'll probably want to be a little more conservative with your upgrade settings.</p>\n\n<p>To enable and start the service, I used <code>systemctl</code>.</p>\n\n<pre><code>$ systemctl enable /etc/systemd/system/jbrisbin.service\n$ systemctl start jbrisbin.service\n</code></pre>\n\n<p>Since I had previously set up my SSH keys and done a <code>git clone</code> of my repository, I pulled up the server and got the home page I had created on my local machine.</p>\n\n<p><img src=\"/content/images/2016/06/home.jpg\" alt=\"jbrisbin.com Home\" /></p>\n\n<p>I have a hard time seeing how this could have been easier!</p>\n\n<h4 id=\"watchingforchanges\">Watching for Changes</h4>\n\n<p>Now that I was able to start making changes to my live blog, I needed to make sure that content gets backed up and that I can re-create the server easily if something untoward happens. Since all my content (and some of my config) is stored in git, I figured it would be pretty easy to create a file watcher service that could tell when changes happened to my application files and automatically do a <code>git commit</code> and <code>push</code> to ensure those changes are backed up. This simple systemd-based service is running right now and every time I stop typing to let Ghost save the draft of this article, the service is committing those changes to git for immediate backup!</p>\n\n<p>The service is simply a Docker image based on <a href=\"https://hub.docker.com/_/alpine/\">Alpine Linux</a> which means size-wise is itsy bitsy (that's a technical term for <em>really small</em>). That fits well with my goals of having a minimal infrastructure to care for. It also saves on disk space on my CoreOS server which is pretty small.</p>\n\n<p>I did some research to find an efficient way to watch the filesystem for changes and <code>inotify-tools</code> quickly floated to the top of Google's search rankings. I wrote a simple bash script that used <code>inotifywait</code> to poll for changes to my application files and then either run a <code>git add</code> or a <code>git rm</code>, depending on the event.</p>\n\n<p>I quickly discovered I needed to filter out some events because sqlite writes a <code>*-journal</code> file when it makes changes to your database. I didn't want these transitory files gumming up the works so I excluded them.</p>\n\n<blockquote>\n  <p>/usr/sbin/git-watch.sh</p>\n</blockquote>\n\n<pre><code>#!/bin/bash\n\nWATCH_DIR=$1\n\necho \"Watching $WATCH_DIR\"\n\nwhile true; do  \n  inotifywait -r -e modify -e delete --exclude '-journal$' $WATCH_DIR | while read FILE; do\n    event=$(echo $FILE | awk '{print $2}')\n    file=$(echo $FILE | awk '{print $1$3}')\n\n    cd $WATCH_DIR\n\n    if [ \"$event\" == \"MODIFY\" ]; then\n      git add $file\n    elif [ \"$event\" == \"DELETE\" ]; then\n      git rm -f $file\n    fi\n\n    git pull\n    git commit -m \"Change made to $file\"\n    git push\n  done\ndone  \n</code></pre>\n\n<p>Admittedly this service is very naive. It doesn't even attempt to deal with conflicts. But the goal here was really just to provide an automated backup and give a minimum amount of flexibility in allowing me to make simple changes locally and deploy them to my server by pushing those changes to my git repo.</p>\n\n<p>To run the service in CoreOS it has to be in a Docker image, so I created a simple one that uses this script as an <code>ENTRYPOINT</code>. </p>\n\n<blockquote>\n  <p>Dockerfile</p>\n</blockquote>\n\n<pre><code>FROM alpine  \nMAINTAINER Jon Brisbin &lt;jon@jbrisbin.com&gt;\n\nRUN \\  \n  apk update &amp;&amp; \\\n  apk add inotify-tools git bash openssh-client\n\nCOPY git-watch.sh /usr/sbin/git-watch.sh  \nRUN chmod a+x /usr/sbin/git-watch.sh\n\nENTRYPOINT [\"/usr/sbin/git-watch.sh\"]  \n</code></pre>\n\n<p>Finally, I created a unit file to run the service in systemd and enabled it per the documentation.</p>\n\n<blockquote>\n  <p>/etc/systemd/system/git-watch-blogs.service</p>\n</blockquote>\n\n<pre><code>[Unit]\nDescription=Watch Blogs  \nAfter=docker.service  \nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0  \nExecStart=/usr/bin/docker run -v /root/.ssh:/root/.ssh -v /root/.gitconfig:/root/.gitconfig -v /var/blogs:/var/blogs git-watch /var/blogs  \nRestart=always\n\n[Install]\nWantedBy=multi-user.target  \n</code></pre>\n\n<p>After enabling and starting the <code>git-watch-blogs.service</code> I was able to make a change to the content in the Ghost admin panel and see the automatic commit show up in my repo on GitHub.</p>\n\n<pre><code>$ systemctl enable /etc/systemd/system/git-watch-blogs.service\n$ systemctl start git-watch-blogs.service\n</code></pre>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n\n<p>This lightweight container-based solution is far easier to maintain, cleaner to administer and easier to upgrade and synchronize with external changes than my previous WordPress and Tumblr blogging platforms. Ghost itself is a joy to use and is beautiful to look at. CoreOS and Docker are extremely versatile arrows to have in my quiver and using them to create ad-hoc services fits my needs perfectly.</p>\n\n<p>Within the next couple of weeks I plan to add another Docker container to serve the website of our local historical society which is in dire need of an upgrade. My plan is to just add another directory to my git repository, deploy another Ghost service and enjoy the benefits of simple and free backup thanks to my <code>git-watch</code> sync service.</p>\n\n<hr />\n\n<h5 id=\"anamelinksalinks\"><a name=\"links\"></a> Links</h5>\n\n<p>[1] - <a href=\"https://coreos.com/\">https://coreos.com/</a><br/>\n[2] - <a href=\"https://www.docker.com/\">https://www.docker.com/</a><br/>\n[3] - <a href=\"https://ghost.org/\">https://ghost.org/</a> and <a href=\"https://hub.docker.com/_/ghost/\">https://hub.docker.com/_/ghost/</a></p>","image":"","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":"Flexible blogging with Ghost, Docker, and CoreOS","meta_description":"This lightweight container-based solution is easier to maintain, cleaner to administer and easier to upgrade than my previous blogging platforms.","author_id":1,"created_at":1466196029203,"created_by":1,"updated_at":1466214925561,"updated_by":1,"published_at":1466213744085,"published_by":1},{"id":4,"uuid":"dfd57c9f-d35f-4bce-a1de-ba9d3cc8c069","title":"CI and CD on Mesos with Jenkins and Docker","slug":"ci-and-cd-on-mesos-with-jenkins-and-docker","markdown":"I don't juggle myself but there is a young lady in our church who is a [world record holder in juggling while running](http://www.guinnessworldrecords.com/world-records/fastest-mile-joggling-with-three-objects-women). The trick is to lay the groundwork of consistent juggling skill and being a strong runner. She ran collegiate cross country so she's about as strong a runner as they come. She's also pretty good at juggling standing still, so putting the two together is pretty astounding. That's a bit like what CI and CD on Mesos with Docker is like: there's several balls to keep in the air and you need to be strong in the fundamentals to pull it off.\n\n### Laying the Substrate\n\nIn order to focus on the important points in this article, it's necessary to leave some of the initial setup of the Mesos cluster as an exercise for the reader. The instructions would be different depending on whether you're using bare metal, Amazon AWS, GCE, SoftLayer, or what have you. You can even run a master and a couple workers in Docker containers on your MacBook Pro. For the purposes of this article, we're going to assume you have a working Mesos cluster with Marathon running the Docker containerizer and enough resources to deploy a Jenkins container along with the necessary Jenkins slaves.\n\n#### Pre-requisites\n\n* [Apache Mesos](http://mesos.apache.org/) ([DC/OS](https://dcos.io/) optional)\n* [Marathon](https://mesosphere.github.io/marathon/)\n* [Docker](https://www.docker.com/)\n\nIn general, assume the latest stable versions of the above, though that's not a hard and fast rule. If you have a 0.28 cluster with an old version of Marathon and Docker 1.10 or 1.11, you should still be fine since none of this really requires updated versions.\n\n### Jenkins as Admin UI\n\nThe essential elements of CI and CD on Mesos don't require Jenkins, so I didn't include it in the pre-requisites. It does make a number of things easier, though, so we'll be using it to orchestrate our builds and provide an \"admin UI\" of sorts where we can create tasks and run them in an ad-hoc fashion.\n\nHere again we have a variety of ways to deploy Jenkins on Mesos. There is a package you can install from the DC/OS web interface. You can deploy a pre-made Jenkins image from Docker Hub via Marathon. You can roll your own image and deploy that. At Basho, we use a custom image derived from [the official Jenkins CI image on Docker Hub](https://hub.docker.com/r/jenkinsci/jenkins/). It's Debian 8 and I've added some standard packages I expect to need, including an [Ansible inventory script](https://gist.github.com/jbrisbin/d89dd389736ac622b0bfc432a78a6fd2) that allows me to run Ansible playbooks against all the slaves in the cluster using [the Jenkins Ansible plugin](https://wiki.jenkins-ci.org/display/JENKINS/Ansible+Plugin).\n\n> mesos-inventory.py\n<script src=\"https://gist.github.com/jbrisbin/d89dd389736ac622b0bfc432a78a6fd2.js\"></script>\n\n#### Dumb or Dynamic Slaves?\n\nWhen running Jenkins on Mesos, you have the option of registering a framework with Mesos that allows you to dynamically provision resources with which to do builds. I'm not a fan of doing anything magically where I don't have a fair amount of control--call me a control freak. I prefer to create dumb slaves and start the JNLP Jenkins slave via Marathon, passing the correct parameters back to Jenkins. I built [a script](https://gist.github.com/jbrisbin/29d26c8413035249bfc3bbaba3d92fee) into my Docker container's Jenkins bootstrap process so that slaves are automatically created and started whenever I submit the container to Marathon.\n\n> connect-slaves.groovy\n<script src=\"https://gist.github.com/jbrisbin/29d26c8413035249bfc3bbaba3d92fee.js\"></script>\n\n### Create the Build Images\n\nIf you've gone through a standard install process for Mesos you likely have workers connected to the master that don't have a lot of \"stuff\" installed on them. Like with CoreOS, you're going to be doing most everything from a Docker container anyway, so that's just fine and dandy. You really don't *need* a lot of software cluttering your worker filesystem; less to worry about securing and keeping up-to-date.\n\nI decided to keep all my Docker image definitions consolidated into a single repository rather than have them spread all over Creation. It does make some things slightly more complicated (like triggering a new image build based on a source change) but in the end, having everything together in one place pays dividends.\n\n#### docker.mk\n\nI don't keep a separate `Dockerfile` for every variation of a Docker image I want to create. I use a utility I wrote called [docker.mk](https://github.com/jbrisbin/docker.mk) that can assemble a `Dockerfile` from a set of snippets and templates. Once generated, that file is used to build and publish the Docker image.\n\n#### build-essential\n\nThe primary Docker image that we use to build software on Mesos is something we call the [build-essential](https://github.com/basho-labs/docker-images/tree/master/tools/build-essential/) image. It contains a wide variety of tools and libraries that we generally need no matter what we're building. It's not a kitchen sink image where anything and everything we might ever need is installed--we do leave some specific libraries to be installed when we do the build.\n\nWe maintain four major variations of this image for the four platforms we build for and support: `alpine`, `centos`, `ubuntu`, and `debian`. The `Dockerfile` we use to build these images is built up from pieces that might vary between the images. For example, the CentOS version of `build-base.Dockerfile` uses `yum` to install the same basic set of software as the Ubuntu version, which uses `apt-get` instead and often has different names for the packages and libraries. That means the images aren't exactly alike between the operating systems but they're close enough to support what we need.\n\n`docker.mk` is a make-based system, so the `Makefile` for `build-essential` includes flags for turning on or off certain portions of the `Dockerfile`. It looks like this:\n\n> build-essential/Makefile\n<script src=\"https://gist.github.com/jbrisbin/98a91dbb754b4cd42373a0d402b4efe8.js\"></script>\n","mobiledoc":null,"html":"<p>I don't juggle myself but there is a young lady in our church who is a <a href=\"http://www.guinnessworldrecords.com/world-records/fastest-mile-joggling-with-three-objects-women\">world record holder in juggling while running</a>. The trick is to lay the groundwork of consistent juggling skill and being a strong runner. She ran collegiate cross country so she's about as strong a runner as they come. She's also pretty good at juggling standing still, so putting the two together is pretty astounding. That's a bit like what CI and CD on Mesos with Docker is like: there's several balls to keep in the air and you need to be strong in the fundamentals to pull it off.</p>\n\n<h3 id=\"layingthesubstrate\">Laying the Substrate</h3>\n\n<p>In order to focus on the important points in this article, it's necessary to leave some of the initial setup of the Mesos cluster as an exercise for the reader. The instructions would be different depending on whether you're using bare metal, Amazon AWS, GCE, SoftLayer, or what have you. You can even run a master and a couple workers in Docker containers on your MacBook Pro. For the purposes of this article, we're going to assume you have a working Mesos cluster with Marathon running the Docker containerizer and enough resources to deploy a Jenkins container along with the necessary Jenkins slaves.</p>\n\n<h4 id=\"prerequisites\">Pre-requisites</h4>\n\n<ul>\n<li><a href=\"http://mesos.apache.org/\">Apache Mesos</a> (<a href=\"https://dcos.io/\">DC/OS</a> optional)</li>\n<li><a href=\"https://mesosphere.github.io/marathon/\">Marathon</a></li>\n<li><a href=\"https://www.docker.com/\">Docker</a></li>\n</ul>\n\n<p>In general, assume the latest stable versions of the above, though that's not a hard and fast rule. If you have a 0.28 cluster with an old version of Marathon and Docker 1.10 or 1.11, you should still be fine since none of this really requires updated versions.</p>\n\n<h3 id=\"jenkinsasadminui\">Jenkins as Admin UI</h3>\n\n<p>The essential elements of CI and CD on Mesos don't require Jenkins, so I didn't include it in the pre-requisites. It does make a number of things easier, though, so we'll be using it to orchestrate our builds and provide an \"admin UI\" of sorts where we can create tasks and run them in an ad-hoc fashion.</p>\n\n<p>Here again we have a variety of ways to deploy Jenkins on Mesos. There is a package you can install from the DC/OS web interface. You can deploy a pre-made Jenkins image from Docker Hub via Marathon. You can roll your own image and deploy that. At Basho, we use a custom image derived from <a href=\"https://hub.docker.com/r/jenkinsci/jenkins/\">the official Jenkins CI image on Docker Hub</a>. It's Debian 8 and I've added some standard packages I expect to need, including an <a href=\"https://gist.github.com/jbrisbin/d89dd389736ac622b0bfc432a78a6fd2\">Ansible inventory script</a> that allows me to run Ansible playbooks against all the slaves in the cluster using <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Ansible+Plugin\">the Jenkins Ansible plugin</a>.</p>\n\n<blockquote>\n  <p>mesos-inventory.py</p>\n</blockquote>\n\n<script src=\"https://gist.github.com/jbrisbin/d89dd389736ac622b0bfc432a78a6fd2.js\"></script>\n\n<h4 id=\"dumbordynamicslaves\">Dumb or Dynamic Slaves?</h4>\n\n<p>When running Jenkins on Mesos, you have the option of registering a framework with Mesos that allows you to dynamically provision resources with which to do builds. I'm not a fan of doing anything magically where I don't have a fair amount of control--call me a control freak. I prefer to create dumb slaves and start the JNLP Jenkins slave via Marathon, passing the correct parameters back to Jenkins. I built <a href=\"https://gist.github.com/jbrisbin/29d26c8413035249bfc3bbaba3d92fee\">a script</a> into my Docker container's Jenkins bootstrap process so that slaves are automatically created and started whenever I submit the container to Marathon.</p>\n\n<blockquote>\n  <p>connect-slaves.groovy</p>\n</blockquote>\n\n<script src=\"https://gist.github.com/jbrisbin/29d26c8413035249bfc3bbaba3d92fee.js\"></script>\n\n<h3 id=\"createthebuildimages\">Create the Build Images</h3>\n\n<p>If you've gone through a standard install process for Mesos you likely have workers connected to the master that don't have a lot of \"stuff\" installed on them. Like with CoreOS, you're going to be doing most everything from a Docker container anyway, so that's just fine and dandy. You really don't <em>need</em> a lot of software cluttering your worker filesystem; less to worry about securing and keeping up-to-date.</p>\n\n<p>I decided to keep all my Docker image definitions consolidated into a single repository rather than have them spread all over Creation. It does make some things slightly more complicated (like triggering a new image build based on a source change) but in the end, having everything together in one place pays dividends.</p>\n\n<h4 id=\"dockermk\">docker.mk</h4>\n\n<p>I don't keep a separate <code>Dockerfile</code> for every variation of a Docker image I want to create. I use a utility I wrote called <a href=\"https://github.com/jbrisbin/docker.mk\">docker.mk</a> that can assemble a <code>Dockerfile</code> from a set of snippets and templates. Once generated, that file is used to build and publish the Docker image.</p>\n\n<h4 id=\"buildessential\">build-essential</h4>\n\n<p>The primary Docker image that we use to build software on Mesos is something we call the <a href=\"https://github.com/basho-labs/docker-images/tree/master/tools/build-essential/\">build-essential</a> image. It contains a wide variety of tools and libraries that we generally need no matter what we're building. It's not a kitchen sink image where anything and everything we might ever need is installed--we do leave some specific libraries to be installed when we do the build.</p>\n\n<p>We maintain four major variations of this image for the four platforms we build for and support: <code>alpine</code>, <code>centos</code>, <code>ubuntu</code>, and <code>debian</code>. The <code>Dockerfile</code> we use to build these images is built up from pieces that might vary between the images. For example, the CentOS version of <code>build-base.Dockerfile</code> uses <code>yum</code> to install the same basic set of software as the Ubuntu version, which uses <code>apt-get</code> instead and often has different names for the packages and libraries. That means the images aren't exactly alike between the operating systems but they're close enough to support what we need.</p>\n\n<p><code>docker.mk</code> is a make-based system, so the <code>Makefile</code> for <code>build-essential</code> includes flags for turning on or off certain portions of the <code>Dockerfile</code>. It looks like this:</p>\n\n<blockquote>\n  <p>build-essential/Makefile</p>\n</blockquote>\n\n<script src=\"https://gist.github.com/jbrisbin/98a91dbb754b4cd42373a0d402b4efe8.js\"></script>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-25 18:51:15","created_by":1,"updated_at":"2016-08-27 14:52:01","updated_by":1,"published_at":null,"published_by":null}],"users":[{"id":1,"uuid":"fef2054f-1487-4dc0-9771-c064b881dec6","name":"Jon Brisbin","slug":"jon","password":"$2a$10$B/SYsb52mCytPHPGVK85hO1sY4unKN7AOPwIml8H8syWKPxYplmVW","email":"jon@jbrisbin.com","image":null,"cover":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_login":"2016-09-26 13:28:02","created_at":"2016-06-16 17:45:32","created_by":1,"updated_at":"2016-09-26 13:28:02","updated_by":1},{"id":2,"uuid":"6cd9e2cc-f052-4989-8170-76716f61ace8","name":"mdigan","slug":"mdigan","password":"$2a$10$457ZNaDH3BAlmind/iMuuOrycYG/kDo1XYTG/k9jj8pP6eR.Bi/ea","email":"mdigan@basho.com","image":null,"cover":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"invited","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_login":null,"created_at":1466537486865,"created_by":1,"updated_at":1466537486865,"updated_by":1}],"roles":[{"id":1,"uuid":"a3c2d079-cafc-46e6-bccd-550da6b61c0d","name":"Administrator","description":"Administrators","created_at":1466099128572,"created_by":1,"updated_at":1466099128572,"updated_by":1},{"id":2,"uuid":"e4dbb3eb-a7d1-498b-8d3d-f76d76b98ac1","name":"Editor","description":"Editors","created_at":1466099128590,"created_by":1,"updated_at":1466099128590,"updated_by":1},{"id":3,"uuid":"9c304bba-e40e-490a-bd83-c7ceefa19559","name":"Author","description":"Authors","created_at":1466099128606,"created_by":1,"updated_at":1466099128606,"updated_by":1},{"id":4,"uuid":"167f074a-ffba-40ea-99aa-5054e887252b","name":"Owner","description":"Blog Owner","created_at":1466099128619,"created_by":1,"updated_at":1466099128619,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1},{"id":2,"role_id":2,"user_id":2}],"permissions":[{"id":1,"uuid":"db24a369-4720-4b94-931a-0aea8725ab34","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1466099128635,"created_by":1,"updated_at":1466099128635,"updated_by":1},{"id":2,"uuid":"01f92673-0a3e-4358-88ed-407867768e56","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1466099128650,"created_by":1,"updated_at":1466099128650,"updated_by":1},{"id":3,"uuid":"c502f3ca-e244-437b-953b-c6ca1483ddd3","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1466099128666,"created_by":1,"updated_at":1466099128666,"updated_by":1},{"id":4,"uuid":"c0843a20-582e-4ac9-8e4a-279dae6017d5","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1466099128682,"created_by":1,"updated_at":1466099128682,"updated_by":1},{"id":5,"uuid":"637e3f7a-24f4-41d7-803f-090911d8308a","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1466099128697,"created_by":1,"updated_at":1466099128697,"updated_by":1},{"id":6,"uuid":"e53348c2-5467-4b21-b4b5-6bdad01fc4d2","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1466099128712,"created_by":1,"updated_at":1466099128712,"updated_by":1},{"id":7,"uuid":"c0f81ba2-dda9-4857-a82b-71c7d4846412","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1466099128727,"created_by":1,"updated_at":1466099128727,"updated_by":1},{"id":8,"uuid":"55a28b74-2619-41ce-a516-0ab01587d85b","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1466099128744,"created_by":1,"updated_at":1466099128744,"updated_by":1},{"id":9,"uuid":"5110b625-d568-4266-a7b3-4ba91ce3affc","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1466099128760,"created_by":1,"updated_at":1466099128760,"updated_by":1},{"id":10,"uuid":"df348d04-b495-4ab0-b048-7296d30c2f3b","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1466099128776,"created_by":1,"updated_at":1466099128776,"updated_by":1},{"id":11,"uuid":"b20a75aa-e30b-47ca-b4f9-2fd03040264a","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1466099128792,"created_by":1,"updated_at":1466099128792,"updated_by":1},{"id":12,"uuid":"6695e6c5-5443-4e2b-94fc-6de42b90e351","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1466099128806,"created_by":1,"updated_at":1466099128806,"updated_by":1},{"id":13,"uuid":"1cdc0013-1563-4536-a2ba-f1af161532da","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1466099128821,"created_by":1,"updated_at":1466099128821,"updated_by":1},{"id":14,"uuid":"cd0cbc09-170d-4254-bdfa-2f6a2527f37d","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1466099128835,"created_by":1,"updated_at":1466099128835,"updated_by":1},{"id":15,"uuid":"160c57a2-39c6-464c-aeab-b88a974382ea","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1466099128848,"created_by":1,"updated_at":1466099128848,"updated_by":1},{"id":16,"uuid":"24f04667-17f4-441c-adf1-0355eb5f2c0d","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1466099128862,"created_by":1,"updated_at":1466099128862,"updated_by":1},{"id":17,"uuid":"744a8666-654d-4090-92dd-366206434ce4","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1466099128875,"created_by":1,"updated_at":1466099128875,"updated_by":1},{"id":18,"uuid":"7de8c870-48ca-4962-9f60-33c0e59b42c5","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1466099128890,"created_by":1,"updated_at":1466099128890,"updated_by":1},{"id":19,"uuid":"901d7697-363b-4b9b-bda5-0064b34760d6","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1466099128905,"created_by":1,"updated_at":1466099128905,"updated_by":1},{"id":20,"uuid":"0614903f-9873-48f9-b166-7c6428db8a9e","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1466099128920,"created_by":1,"updated_at":1466099128920,"updated_by":1},{"id":21,"uuid":"ea2460c3-1385-4a7c-8f9b-4bb479bf610b","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1466099128935,"created_by":1,"updated_at":1466099128935,"updated_by":1},{"id":22,"uuid":"378d0328-c696-4f8c-ae9e-644ba6c18a82","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1466099128949,"created_by":1,"updated_at":1466099128949,"updated_by":1},{"id":23,"uuid":"ab32b3f5-dcbe-4332-ae79-c6a1f39a3ede","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1466099128965,"created_by":1,"updated_at":1466099128965,"updated_by":1},{"id":24,"uuid":"5e359462-3a36-4c47-90ba-2723125f26c5","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1466099128979,"created_by":1,"updated_at":1466099128979,"updated_by":1},{"id":25,"uuid":"303ddbb3-460c-4200-8a56-822ea1f060f5","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1466099128992,"created_by":1,"updated_at":1466099128992,"updated_by":1},{"id":26,"uuid":"f5c06860-f2d5-4573-b77d-aefdc9952f08","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1466099129005,"created_by":1,"updated_at":1466099129005,"updated_by":1},{"id":27,"uuid":"5b8fe227-1ad4-4fad-bc7c-075547f1dbdd","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1466099129019,"created_by":1,"updated_at":1466099129019,"updated_by":1},{"id":28,"uuid":"feb00e4e-9a2c-49fb-a1af-d5f35ddb4302","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1466099129032,"created_by":1,"updated_at":1466099129032,"updated_by":1},{"id":29,"uuid":"64aa873e-fb36-4d87-a3ab-7c7080e2aa85","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1466099129045,"created_by":1,"updated_at":1466099129045,"updated_by":1},{"id":30,"uuid":"3b5a59bf-c2ca-4c77-b950-3bb49649dc25","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1466099129057,"created_by":1,"updated_at":1466099129057,"updated_by":1},{"id":31,"uuid":"1bcc92f5-8825-481b-b87a-2e20542db0d1","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":1466099129070,"created_by":1,"updated_at":1466099129070,"updated_by":1},{"id":32,"uuid":"6c2e6a22-9520-4fe0-8a11-077a2729cce9","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":1466099129084,"created_by":1,"updated_at":1466099129084,"updated_by":1},{"id":33,"uuid":"3bc89780-bc8e-4011-823c-20169863578f","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":1466099129100,"created_by":1,"updated_at":1466099129100,"updated_by":1},{"id":34,"uuid":"1f7ec73f-e7af-47fc-b022-599749e482f5","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":1466099129118,"created_by":1,"updated_at":1466099129118,"updated_by":1},{"id":35,"uuid":"add6f65a-f2b6-49f2-b2f2-782e2a0b8b5c","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":1466099129136,"created_by":1,"updated_at":1466099129136,"updated_by":1},{"id":36,"uuid":"9d97c7ff-9018-4f7c-b834-30c55137baf1","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":1466099129150,"created_by":1,"updated_at":1466099129150,"updated_by":1},{"id":37,"uuid":"e0546696-df87-4a2a-ae50-96cc1756c570","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":1466099129162,"created_by":1,"updated_at":1466099129162,"updated_by":1},{"id":38,"uuid":"c406f394-5a02-4cfe-b7fa-bd15a4df3c6f","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":1466099129175,"created_by":1,"updated_at":1466099129175,"updated_by":1},{"id":39,"uuid":"886c5eb8-ffdb-4dd2-b824-4a3f0c61d723","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":1466099129193,"created_by":1,"updated_at":1466099129193,"updated_by":1},{"id":40,"uuid":"f515dbc7-67b1-4e66-a951-c3b0c914fe8f","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":1466099129207,"created_by":1,"updated_at":1466099129207,"updated_by":1},{"id":41,"uuid":"b1bbd0a8-7a58-4d4e-80ea-09ddaa03c59c","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2016-09-08 22:37:51","created_by":1,"updated_at":"2016-09-08 22:37:51","updated_by":1},{"id":42,"uuid":"6f8bfcad-2886-482c-a5f8-1728c7656658","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2016-09-08 22:37:51","created_by":1,"updated_at":"2016-09-08 22:37:51","updated_by":1},{"id":43,"uuid":"47187772-8da5-4749-923d-442f70b2181f","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2016-09-08 22:37:51","created_by":1,"updated_at":"2016-09-08 22:37:51","updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":1,"permission_id":31},{"id":32,"role_id":1,"permission_id":32},{"id":33,"role_id":1,"permission_id":33},{"id":34,"role_id":1,"permission_id":34},{"id":35,"role_id":1,"permission_id":35},{"id":36,"role_id":1,"permission_id":36},{"id":37,"role_id":1,"permission_id":37},{"id":38,"role_id":1,"permission_id":38},{"id":39,"role_id":1,"permission_id":39},{"id":40,"role_id":1,"permission_id":40},{"id":41,"role_id":2,"permission_id":8},{"id":42,"role_id":2,"permission_id":9},{"id":43,"role_id":2,"permission_id":10},{"id":44,"role_id":2,"permission_id":11},{"id":45,"role_id":2,"permission_id":12},{"id":46,"role_id":2,"permission_id":13},{"id":47,"role_id":2,"permission_id":14},{"id":48,"role_id":2,"permission_id":16},{"id":49,"role_id":2,"permission_id":17},{"id":50,"role_id":2,"permission_id":18},{"id":51,"role_id":2,"permission_id":19},{"id":52,"role_id":2,"permission_id":20},{"id":53,"role_id":2,"permission_id":21},{"id":54,"role_id":2,"permission_id":24},{"id":55,"role_id":2,"permission_id":25},{"id":56,"role_id":2,"permission_id":26},{"id":57,"role_id":2,"permission_id":27},{"id":58,"role_id":2,"permission_id":28},{"id":59,"role_id":2,"permission_id":29},{"id":60,"role_id":2,"permission_id":30},{"id":61,"role_id":2,"permission_id":31},{"id":62,"role_id":2,"permission_id":32},{"id":63,"role_id":2,"permission_id":33},{"id":64,"role_id":2,"permission_id":34},{"id":65,"role_id":2,"permission_id":35},{"id":66,"role_id":2,"permission_id":39},{"id":67,"role_id":3,"permission_id":8},{"id":68,"role_id":3,"permission_id":9},{"id":69,"role_id":3,"permission_id":11},{"id":70,"role_id":3,"permission_id":13},{"id":71,"role_id":3,"permission_id":14},{"id":72,"role_id":3,"permission_id":16},{"id":73,"role_id":3,"permission_id":17},{"id":74,"role_id":3,"permission_id":18},{"id":75,"role_id":3,"permission_id":20},{"id":76,"role_id":3,"permission_id":24},{"id":77,"role_id":3,"permission_id":25},{"id":78,"role_id":3,"permission_id":30},{"id":79,"role_id":3,"permission_id":31},{"id":80,"role_id":3,"permission_id":32},{"id":81,"role_id":3,"permission_id":33},{"id":82,"role_id":3,"permission_id":34},{"id":83,"role_id":3,"permission_id":35},{"id":84,"role_id":3,"permission_id":39},{"id":85,"role_id":1,"permission_id":41},{"id":86,"role_id":1,"permission_id":42},{"id":87,"role_id":1,"permission_id":43}],"permissions_apps":[],"settings":[{"id":1,"uuid":"fb5d7761-40f0-4e5c-a9d7-d9d7edd97624","key":"databaseVersion","value":"007","type":"core","created_at":1466099132215,"created_by":1,"updated_at":1466099132215,"updated_by":1},{"id":2,"uuid":"5004da03-6533-4d2f-bcb2-7b87b05bb43c","key":"dbHash","value":"e2a355e3-bfc1-4d19-8ee0-1931f496c816","type":"core","created_at":1466099132215,"created_by":1,"updated_at":1466099132559,"updated_by":1},{"id":3,"uuid":"be3e8170-9f0f-4615-97ae-70416d23f719","key":"nextUpdateCheck","value":"1474982873","type":"core","created_at":"2016-06-16 17:45:32","created_by":1,"updated_at":"2016-09-26 13:27:52","updated_by":1},{"id":4,"uuid":"ad299f7d-5b47-48d3-9f87-28b97462fa1e","key":"displayUpdateNotification","value":"0.11.0","type":"core","created_at":"2016-06-16 17:45:32","created_by":1,"updated_at":"2016-09-26 13:27:52","updated_by":1},{"id":5,"uuid":"7311b918-68ea-447b-8e38-8b12d07b5856","key":"title","value":"jon brisbin","type":"blog","created_at":1466099132215,"created_by":1,"updated_at":1466286598606,"updated_by":1},{"id":6,"uuid":"5e76aaa4-238e-4e4c-9e0b-97f0a6cfc4d6","key":"description","value":"software engineer, writer, photographer, lay theologian","type":"blog","created_at":1466099132215,"created_by":1,"updated_at":1466286598608,"updated_by":1},{"id":7,"uuid":"4bdd5bc8-d7a3-4173-a3d8-43f68f28be89","key":"logo","value":"/content/images/2016/06/b-w_640.jpg","type":"blog","created_at":1466099132215,"created_by":1,"updated_at":1466286598610,"updated_by":1},{"id":8,"uuid":"76af9313-7f4a-42c9-9790-44b32b521e63","key":"cover","value":"/content/images/2016/06/DSCF3950.jpg","type":"blog","created_at":1466099132216,"created_by":1,"updated_at":1466286598612,"updated_by":1},{"id":9,"uuid":"5b055753-2619-4055-a130-cd49a75fb55f","key":"defaultLang","value":"en_US","type":"blog","created_at":1466099132216,"created_by":1,"updated_at":1466286598615,"updated_by":1},{"id":10,"uuid":"a54767cd-61c3-4b09-ba5f-e4d1b989f9aa","key":"postsPerPage","value":"5","type":"blog","created_at":1466099132216,"created_by":1,"updated_at":1466286598617,"updated_by":1},{"id":11,"uuid":"a740a4b5-afdc-4676-883d-3f89a7e28674","key":"forceI18n","value":"true","type":"blog","created_at":1466099132216,"created_by":1,"updated_at":1466286598619,"updated_by":1},{"id":12,"uuid":"04d1c32c-ca21-40ce-80f3-a650e73346b1","key":"permalinks","value":"/:slug/","type":"blog","created_at":1466099132216,"created_by":1,"updated_at":1466286598621,"updated_by":1},{"id":13,"uuid":"e6ee2dc7-c4b2-47df-a7e8-6793718ea38a","key":"ghost_head","value":"<script>\nvar ga_id = 'UA-27843911-1';\nvar disqus_shortname = 'jbrisbin'\nvar social_link = {\n    'twitter-square': 'https://twitter.com/j_brisbin',\n    'linkedin-square': 'https://www.linkedin.com/in/jon-brisbin-5406a06',\n    'github-square': 'https://github.com/jbrisbin',\n    'rss':'https://jbrisbin.com/rss/'\n}\n</script>","type":"blog","created_at":1466099132217,"created_by":1,"updated_at":1466286598627,"updated_by":1},{"id":14,"uuid":"105684a6-c542-4ccb-aca7-66003df52876","key":"ghost_foot","value":"","type":"blog","created_at":1466099132217,"created_by":1,"updated_at":1466286598629,"updated_by":1},{"id":15,"uuid":"218e03ca-d4d2-43a2-a34e-4f7e62bb94af","key":"facebook","value":"","type":"blog","created_at":1466099132218,"created_by":1,"updated_at":1466286598631,"updated_by":1},{"id":16,"uuid":"44354b43-ebb4-4c0c-a389-62979442d073","key":"twitter","value":"@j_brisbin","type":"blog","created_at":1466099132218,"created_by":1,"updated_at":1466286598633,"updated_by":1},{"id":17,"uuid":"0861d1f5-3539-4712-aa67-10206cffe34a","key":"labs","value":"{}","type":"blog","created_at":1466099132219,"created_by":1,"updated_at":1466286598636,"updated_by":1},{"id":18,"uuid":"b0c049a7-3922-43dc-b598-b3cb4fbe9f94","key":"navigation","value":"[{\"label\":\"home\",\"url\":\"/\"},{\"label\":\"#geekery\",\"url\":\"/tag/geekery/\"},{\"label\":\"#photography\",\"url\":\"/tag/photography/\"},{\"label\":\"#theology\",\"url\":\"/tag/theology/\"}]","type":"blog","created_at":1466099132220,"created_by":1,"updated_at":1466286598640,"updated_by":1},{"id":19,"uuid":"fd8cb2bb-702d-45bc-bf77-d243560460c5","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":1466099132220,"created_by":1,"updated_at":1466286598646,"updated_by":1},{"id":20,"uuid":"40178751-93c0-43b8-a312-8e55b667d604","key":"activeApps","value":"[]","type":"app","created_at":1466099132220,"created_by":1,"updated_at":1466099132220,"updated_by":1},{"id":21,"uuid":"844a65b1-0772-4363-8141-ba7fc2a1047f","key":"installedApps","value":"[]","type":"app","created_at":"2016-06-16 17:45:32","created_by":1,"updated_at":"2016-09-26 13:43:34","updated_by":1},{"id":22,"uuid":"c5deaf62-46e4-45d9-80ad-2bab638888b1","key":"isPrivate","value":"false","type":"private","created_at":1466099132220,"created_by":1,"updated_at":1466286598642,"updated_by":1},{"id":23,"uuid":"3727967e-d781-43be-86f6-07d23bdd64f5","key":"password","value":"","type":"private","created_at":1466099132221,"created_by":1,"updated_at":1466286598644,"updated_by":1},{"id":24,"uuid":"d5af2626-0596-45bc-918a-0275ee49f9db","key":"activeTheme","value":"odin","type":"theme","created_at":1466099132220,"created_by":1,"updated_at":1466286598624,"updated_by":1},{"id":25,"uuid":"fd46c0cf-105f-4ad2-85b7-572cb197663c","key":"seenNotifications","value":"[]","type":"core","created_at":"2016-08-26 00:02:22","created_by":1,"updated_at":"2016-08-26 00:02:22","updated_by":1},{"id":26,"uuid":"264ef2f9-d960-48d1-9048-f8da12b9b037","key":"migrations","value":"{}","type":"core","created_at":"2016-08-26 00:02:22","created_by":1,"updated_at":"2016-08-26 00:02:22","updated_by":1},{"id":27,"uuid":"bc268e75-cce0-4f69-8593-48c5252e102f","key":"activeTimezone","value":"Etc/UTC","type":"blog","created_at":"2016-08-26 00:02:22","created_by":1,"updated_at":"2016-08-26 00:02:22","updated_by":1}],"tags":[{"id":1,"uuid":"704d609a-4e48-4357-ae79-64a0a75e1028","name":"Getting Started","slug":"getting-started","description":null,"image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":1466099128493,"created_by":1,"updated_at":1466099128493,"updated_by":1},{"id":2,"uuid":"dcd1f673-1604-4e5e-a225-7bec4fb9b2a4","name":"geekery","slug":"geekery","description":"articles on riak, spark, mesos, scala, erlang and others","image":null,"parent_id":null,"visibility":"public","meta_title":"All The Things (Related to Software Engineering)","meta_description":"Articles on software engineering and related technologies like Spark, Mesos, Riak, NoSQL, cloud computing, and Big and Fast Data.","created_at":1466110665769,"created_by":1,"updated_at":1466110802064,"updated_by":1},{"id":3,"uuid":"653787cb-2f73-450d-8252-14901365f782","name":"photography","slug":"photography","description":"fine art photography","image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":1466110813061,"created_by":1,"updated_at":1466111035218,"updated_by":1},{"id":4,"uuid":"d6f46eb8-f899-4635-a06e-700c333cd968","name":"theology","slug":"theology","description":"articles on theological matters","image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":1466110830996,"created_by":1,"updated_at":1466110846369,"updated_by":1}],"posts_tags":[{"id":1,"post_id":1,"tag_id":1,"sort_order":0},{"id":2,"post_id":3,"tag_id":2,"sort_order":0}],"apps":[],"app_settings":[],"app_fields":[],"subscribers":[]}}